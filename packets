#!/bin/bash -eux


function github_release {
    curl -sL https://api.github.com/repos/$1/releases/latest | jq -r '.assets[].browser_download_url' | grep amd64 | grep $2 | grep -v musl | grep -v sha256
}

function install_gem {
    gem=$1
    if ! eval "$gem --version"
    then
        gem install --user $gem
    else
        gem update --user $gem
    fi
}

function setup_gcloud {
    export CLOUDSDK_CORE_DISABLE_PROMPTS=1
    if ! gcloud version
    then
        curl https://sdk.cloud.google.com | bash
    else
        gcloud components update
    fi
}

function setup_binary_env {
    repo=$1
    location="$HOME/.$(echo $repo | cut -d'/' -f 2)"
    if [ ! -d "$location" ]
    then
        git clone --branch master --depth 1 https://github.com/$repo.git "$location"
    else
        (
            cd "$location"
            git pull
        )
    fi
}

function install_ergodox {
    ergodox_kernel='''
# Teensy rules for the Ergodox EZ Original / Shine / Glow
ATTRS{idVendor}=="16c0", ATTRS{idProduct}=="04[789B]?", ENV{ID_MM_DEVICE_IGNORE}="1"
ATTRS{idVendor}=="16c0", ATTRS{idProduct}=="04[789A]?", ENV{MTP_NO_PROBE}="1"
SUBSYSTEMS=="usb", ATTRS{idVendor}=="16c0", ATTRS{idProduct}=="04[789ABCD]?", MODE:="0666"
KERNEL=="ttyACM*", ATTRS{idVendor}=="16c0", ATTRS{idProduct}=="04[789B]?", MODE:="0666"

# STM32 rules for the Planck EZ Standard / Glow
SUBSYSTEMS=="usb", ATTRS{idVendor}=="0483", ATTRS{idProduct}=="df11", \
    MODE:="0666", \
    SYMLINK+="stm32_dfu"
'''
    wally_kernel=/etc/udev/rules.d/50-wally.rules
    sudo echo $ergodox_kernel > $wally_kernel
    curl -L --output ~/bin/wally https://configure.ergodox-ez.com/wally/linux
}



function install_debian {
    gopass_apt="/etc/apt/sources.list.d/gopass.list"
    if [ ! -f "$gopass_apt" ]
    then
        wget -q -O- https://api.bintray.com/orgs/gopasspw/keys/gpg/public.key | sudo apt-key add -
        echo "deb https://dl.bintray.com/gopasspw/gopass trusty main" | sudo tee $gopass_apt
    fi

    sudo apt-get update
    sudo apt-get upgrade -y
    sudo apt-get install -y \
        most \
        jq \
        python3 \
        python3-pip \
        python3-dev \
        python3-setuptools \
        ruby \
        ruby-dev \
        rng-tools \
        gnupg \
        gopass \
        peco \
        neovim \
        zsh \
        terminator \
        git-crypt \
        git-lfs \
        chrome-gnome-shell \
        trash-cli \
        libncursesw5 \
        gtk+3.0 \
        webkit2gtk-4.0 \
        libusb-dev \
        inkscape \
        x11-apps \
        openvpn \
        docker \
        curl \
        xclip \
        conky-all \
        xdotool
        # nodejs

    if ! which wally &> /dev/null; then
        install_ergodox
    fi

    (
        cd /tmp
        for repo in "sharkdp/fd" "sharkdp/bat" "MitMaro/git-interactive-rebase-tool" "BurntSushi/ripgrep"
        do
                name="$(echo $repo | cut -d'/' -f 2)"
                curl -L --output "$name.deb" $(github_release $repo 'deb')
                sudo dpkg -i "$name.deb"
                rm "$name.deb"
        done
        for packet in https://downloads.slack-edge.com/linux_releases/slack-desktop-4.4.0-amd64.deb https://zoom.us/client/latest/zoom_amd64.deb https://clockify-resources.s3.eu-central-1.amazonaws.com/downloads/Clockify_Setup.deb
        do
            name="$(echo $packet | rev | cut -d'/' -f 1 | rev)"
            curl -L --output "$name.deb" "${packet}"
            sudo dpkg -i "$name.deb"
            rm "$name.deb"
        done
    )

    # snap
    for app in code; do
        if ! snap list | grep "${app}"
        then
            snap install --classic "${app}"
        fi
    done
    for app in spotify; do
        if ! snap list | grep "${app}"
        then
            snap install "${app}"
        fi
    done
    for app in tre; do
        if ! snap list | grep "${app}"
        then
            snap install --devmode --beta "${app}"
        fi
    done
    for app in fasd; do
        if ! snap list | grep "${app}"
        then
            snap install --beta "${app}"
        fi
    done
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/KaizIqbal/Bibata_Cursor/master/Bibata.sh)"
}

function install_osx {
    if ! brew --version
    then
        /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi
    for p in  jq gnupg2 gopass pinentry-mac peco bat neovim zsh git-crypt git-lfs fd fasd python trash-cli libusb zsh ripgrep broot
    do
        brew install $p
    done
    broot --install
    if ! cat ~/.gnupg/gpg-agent.conf | grep -q /usr/local/bin/pinentry-mac; then
        echo "pinentry-program /usr/local/bin/pinentry-mac" >> ~/.gnupg/gpg-agent.conf
    fi
    (
        cd /tmp
        curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
        python3 get-pip.py
        rm get-pip.py
    )
}

function install_fonts {
    (
        if [ ! -d "${FONT_DIR}" ]
        then
            mkdir -p "${FONT_DIR}"
        fi
        cd "${FONT_DIR}"
        for font in "https://github.com/ryanoasis/nerd-fonts/raw/master/patched-fonts/DroidSansMono/complete/Droid%20Sans%20Mono%20Nerd%20Font%20Complete.otf" "https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/UbuntuMono/Regular/complete/Ubuntu%20Mono%20Nerd%20Font%20Complete%20Mono.ttf" "https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/Hack/Regular/complete/Hack%20Regular%20Nerd%20Font%20Complete%20Mono.ttf"
        do
            font_name="$(echo "${font}" | rev | cut -d'/' -f1 | rev | sed 's|%20| |g')"
            if [ ! -f "$font_name" ]; then
                curl -fL --output "${font_name}" "${font}"
            fi
        done
        fc-cache -vf
        mkfontscale
        mkfontdir
    )
}

if apt-get --version &> /dev/null; then
    export FONT_DIR="$HOME/.local/share/fonts"
    export platform=linux
    install_debian
elif uname -a | grep -iq darwin; then
    export FONT_DIR="$HOME/Library/Fonts"
    export platform=darwin
    install_osx
fi

if [ ! -d "~/.zinit" ]; then
    mkdir ~/.zinit
    git clone --depth 1 https://github.com/zdharma/zinit.git ~/.zinit/bin
fi

if [ ! -f "$HOME/.local/share/nvim/site/autoload/plug.vim" ]; then
    curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
fi

install_fonts
setup_gcloud

for gem in colorls lolcat
do
    install_gem $gem
done

curl -L https://cht.sh/:cht.sh > ~/bin/cht.sh
curl -L git.io/trans -o ~/bin/trans

chmod -x ~/bin/*

for repo in "syndbg/goenv" "tfutils/tfenv"
do
    setup_binary_env $repo
done

sudo git clone --depth 1 https://github.com/facebook/PathPicker.git /usr/local/path-picker
sudo ln -s "/usr/local/path-picker/fpp" /usr/local/bin/fpp
chmod +x /usr/local/bin/fpp

(
  cd "$(mktemp -d)" &&
  curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/krew.{tar.gz,yaml}" &&
  tar zxvf krew.tar.gz &&
  KREW=./krew-"$(uname | tr '[:upper:]' '[:lower:]')_amd64" &&
  "$KREW" install --manifest=krew.yaml --archive=krew.tar.gz &&
  "$KREW" update
)

zsh -c "kubectl krew install ctx"
zsh -c "kubectl krew install ns"