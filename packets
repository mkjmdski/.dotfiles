#!/bin/bash -eux

function setup_binary_env {
    repo=$1
    location="$HOME/.$(echo $repo | cut -d'/' -f 2)"
    if [ ! -d "$location" ]
    then
        git clone --branch master --depth 1 https://github.com/$repo.git "$location"
    else
        (
            cd "$location"
            git pull
        )
    fi
}

function install_debian {
    sudo apt-get update
    sudo apt-get upgrade -y
    sudo apt-get install -y \
        python3 \
        python3-pip \
        python3-dev \
        python3-setuptools \
        ruby \
        ruby-dev \
        rng-tools \
        gnupg \
        neovim \
        zsh \
        terminator \
        chrome-gnome-shell \
        trash-cli \
        libncursesw5 \
        gtk+3.0 \
        webkit2gtk-4.0 \
        libusb-dev \
        x11-apps \
        openvpn \
        docker \
        curl \
        xclip \
        xdotool \
        libgtop-2.0-11 \
        gir1.2-gtop-2.0 \
        gnome-tweak-tool \
        apt-transport-https \
        ca-certificates \
        curl \
        gnupg-agent \
        software-properties-common \
        w3m \
        pdftk
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        sudo add-apt-repository \
            "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) \
            stable"
        sudo apt-get update
        sudo apt-get install docker-ce docker-ce-cli containerd.io
    (
        cd /tmp
        for packet in https://downloads.slack-edge.com/linux_releases/slack-desktop-4.4.0-amd64.deb https://clockify-resources.s3.eu-central-1.amazonaws.com/downloads/Clockify_Setup.deb
        do
            name="$(echo $packet | rev | cut -d'/' -f 1 | rev)"
            if [ ! -f "$name.deb" ]; then
                curl -L --output "$name.deb" "${packet}"
            fi
            sudo dpkg -i "$name.deb" || (sudo apt-get install -f -y && sudo dpkg -i "$name.deb")
            rm "$name.deb"
        done
    )

    # snap
    for app in code whatsdesk telegram-desktop caprine google-cloud-sdk kubectl; do
        if ! snap list | grep "${app}"
        then
            snap install --classic "${app}"
        fi
    done
    for app in spotify doctl bump; do
        if ! snap list | grep "${app}"
        then
            snap install "${app}"
        fi
    done
    for app in fasd; do
        if ! snap list | grep "${app}"
        then
            snap install --beta "${app}"
        fi
    done
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/KaizIqbal/Bibata_Cursor/master/Bibata.sh)"
    for repo in "syndbg/goenv" "tfutils/tfenv" "yuya-takeyama/helmenv"
    do
        setup_binary_env $repo
    done
    $HOME/.tfenv/bin/tfenv install
}

function install_osx {
    if ! brew --version
    then
        /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi
    brew tap homebrew/cask-fonts
    for p in spotify visual-studio-code google-cloud-sdk slack iterm2 font-hack-nerd-font
    do
        brew install --cask $p
    done
    for p in gnupg2 pinentry-mac neovim zsh fasd python trash-cli libusb broot doctl kubernetes-cli docker bumpversion openvpn curl neovim tfenv goenv trash-cli xclip helm coreutils bat peco jq gnu-sed
    do
        brew install $p
    done
    broot --install
    if ! cat ~/.gnupg/gpg-agent.conf | grep -q /usr/local/bin/pinentry-mac; then
        echo "pinentry-program /usr/local/bin/pinentry-mac" >> ~/.gnupg/gpg-agent.conf
    fi
    (
        cd /tmp
        curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
        python3 get-pip.py
        rm get-pip.py
    )
}

function install_fonts {
    (
        if [ ! -d "${FONT_DIR}" ]
        then
            mkdir -p "${FONT_DIR}"
        fi
        cd "${FONT_DIR}"
        for font in "https://github.com/ryanoasis/nerd-fonts/raw/master/patched-fonts/DroidSansMono/complete/Droid%20Sans%20Mono%20Nerd%20Font%20Complete.otf" "https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/UbuntuMono/Regular/complete/Ubuntu%20Mono%20Nerd%20Font%20Complete%20Mono.ttf" "https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/Hack/Regular/complete/Hack%20Regular%20Nerd%20Font%20Complete%20Mono.ttf"
        do
            font_name="$(echo "${font}" | rev | cut -d'/' -f1 | rev | sed 's|%20| |g')"
            if [ ! -f "$font_name" ]; then
                curl -fL --output "${font_name}" "${font}"
            fi
        done
        fc-cache -vf
        mkfontscale
        mkfontdir
    )
}

if apt-get --version &> /dev/null; then
    export FONT_DIR="$HOME/.local/share/fonts"
    export platform=linux
    install_debian
elif uname -a | grep -iq darwin; then
    export FONT_DIR="$HOME/Library/Fonts"
    export platform=darwin
    install_osx
fi

if [ ! -d "~/.zinit" ]; then
    mkdir ~/.zinit
    git clone --depth 1 https://github.com/zdharma/zinit.git ~/.zinit/bin
fi

if [ ! -f "$HOME/.local/share/nvim/site/autoload/plug.vim" ]; then
    curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
fi

install_fonts

curl -L https://cht.sh/:cht.sh > ~/bin/cht.sh
curl -L git.io/trans -o ~/bin/trans

sudo chmod -x ~/bin/*

(
  cd "$(mktemp -d)" &&
  curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/krew.{tar.gz,yaml}" &&
  tar zxvf krew.tar.gz &&
  KREW=./krew-"$(uname | tr '[:upper:]' '[:lower:]')_amd64" &&
  "$KREW" install --manifest=krew.yaml --archive=krew.tar.gz &&
  "$KREW" update
)

for plugin in ctx ns cssh view-utilization view-secret; do
    zsh -c "kubectl krew install $plugin"
done

curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash
wget -O - https://github.com/shvchk/fallout-grub-theme/raw/master/install.sh | bash

# go get -u github.com/cloudflare/cloudflare-go/...