#### STANDARD SETTINGS
[core]
	# Don't consider trailing space change as a cause for merge conflicts
	whitespace = -trailing-space
	# Use vim as default editor
	editor = vim
	# Use GUI editors
	# editor = code --wait
	# editor = subl -n -w
	# editor = atom --wait

#### COLORS DEFINITIONS
[color]
	ui = auto

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold

[color "status"]
	added = yellow
	changed = green
	untracked = cyan

#### COMMAND SETTINGS
[log]
	# Use abbrev SHAs whenever possible/relevant instead of full 40 chars
	abbrevCommit = true

[push]
	# When pushing, also push tags whose commit-ishs are now reachable upstream
	followTags = true

[tag]
	# Sort tags as version numbers whenever applicable, so 1.10.2 is AFTER 1.2.0.
	sort = version:refname

[pull]
	#always rebase and stash before pulling
	rebase = true
	autostash = true

[status]
	# show branch and stash
	branch = true
	showStash = true

[rebase]
    instructionFormat = %s [%an]
	amend = commit --amend --no-edit

[sequence]
    editor = interactive-rebase-tool

#### MERGETOOLS
# PyCharm
# [merge]
#     tool = pycharm
# [mergetool "pycharm"]
# 	cmd = /usr/local/bin/charm merge "$LOCAL" "$REMOTE" "$BASE" "$MERGED"
# VIM
[merge]
	tool = vimdiff
	conflictstyle = diff3
[mergetool "vimdiff"]
	prompt = false


#### DIFF TOOLS
[diff]
	renames = true
	tool = icdiff
#     tool = pycharm
[difftool]
	prompt = false
[difftool "icdiff"]
	cmd = icdiff --line-numbers $LOCAL $REMOTE
# [difftool "pycharm"]
# 	cmd = /usr/local/bin/charm diff "$LOCAL" "$REMOTE" && echo "Press enter to continue..." && read

#### ALIASES
[alias]
	a = add --all
	m = commit --message
	p = !git pull && git push
	s = status
	u = push --set-upstream origin
 	st = stash save --include-untracked
	pop = stash pop
	amend = commit --amend --no-edit
	force = push --force-with-lease
	log-line = log --pretty=format:\"%C(yellow)%h %ar %C(auto)%d %Creset %s, %Cblue%cn\" --graph --all
 	uncommit = reset --soft HEAD^
	unstage = reset HEAD
	this = !git init && git add -A && git commit -m \"Initial commit.\"
	branch-delete = !bash -c \" \
		git branch -D $1 && \
		git push origin :$1 \
	\"
	tag-delete = !sh -c \" \
		git tag -d $1 && \
		git push origin :refs/tags/$1 \
	\"
	# show changed dirs
	dirs = "!f(){ git diff --dirstat=files,0 HEAD~1 | awk '{print $2}' | cut -d '/' -f 1 | sort | uniq ; }; f"
	overwrite = !git a && git amend && git force
	# gitlab specific
	skip = push -o ci.skip
	mr = "!f(){ git push -o merge_request.create -o merge_request.remove_source_branch -o merge_request.target=\"${1-master}\" ; }; f"
	mr-u = "!f(){ git push -o merge_request.create -o merge_request.remove_source_branch -o merge_request.target=\"${1-master}\" --set-upstream origin $(git rev-parse --abbrev-ref HEAD) ; }; f"
